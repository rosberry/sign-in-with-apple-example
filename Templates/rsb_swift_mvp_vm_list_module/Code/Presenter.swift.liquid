{% include 'header' %}

final class {{ prefix }}{{ module_info.name }}Presenter {

    typealias Dependencies = Any

    weak var view: {{ prefix }}{{ module_info.name }}ViewInput?
    weak var output: {{ prefix }}{{ module_info.name }}ModuleOutput?

    var state: {{ prefix }}{{ module_info.name }}State

    private let dependencies: Dependencies
    private let listItemsFactory: {{ prefix }}{{ module_info.name }}ListItemsFactory

    init(state: {{ prefix }}{{ module_info.name }}State, 
         dependencies: Dependencies, 
         listItemsFactory: {{ prefix }}{{ module_info.name }}ListItemsFactory) {
        self.state = state
        self.dependencies = dependencies
        self.listItemsFactory = listItemsFactory
    }
}

// MARK: - {{ prefix }}{{ module_info.name }}ViewOutput

extension {{ prefix }}{{ module_info.name }}Presenter: {{ prefix }}{{ module_info.name }}ViewOutput {

    func viewDidLoad() {
        update(force: true, animated: false)
    }
}

// MARK: - {{ prefix }}{{ module_info.name }}ModuleInput

extension {{ prefix }}{{ module_info.name }}Presenter: {{ prefix }}{{ module_info.name }}ModuleInput {

    func update(force: Bool = false, animated: Bool) {
        let viewModel = {{ prefix }}{{ module_info.name }}ViewModel(state: state, listItemsFactory: listItemsFactory)
        view?.update(with: viewModel, force: force, animated: animated)
    }
}
