{% include 'header' %}

import UIKit
import CollectionViewTools
import Core

protocol {{ prefix }}{{ module_info.name }}ViewInput: class {
    func update(with viewModel: {{ prefix }}{{ module_info.name }}ViewModel, force: Bool, animated: Bool)
}

protocol {{ prefix }}{{ module_info.name }}ViewOutput: class {
    func viewDidLoad()
}

final class {{ prefix }}{{ module_info.name }}ViewController: UIViewController {

    private var viewModel: {{ prefix }}{{ module_info.name }}ViewModel
    private let output: {{ prefix }}{{ module_info.name }}ViewOutput

    private lazy var collectionViewManager: CollectionViewManager = .init(collectionView: collectionView)

    // MARK: - Subviews

    private lazy var collectionView: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .vertical
        let view = UICollectionView(frame: .zero, collectionViewLayout: layout)
        view.backgroundColor = .clear
        view.alwaysBounceVertical = true
        view.contentInsetAdjustmentBehavior = .never
        view.isPrefetchingEnabled = false
        return view
    }()

    // MARK: - Lifecycle

    init(viewModel: {{ prefix }}{{ module_info.name }}ViewModel, output: {{ prefix }}{{ module_info.name }}ViewOutput) {
        self.viewModel = viewModel
        self.output = output
        super.init(nibName: nil, bundle: nil)
    }

    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        view.add(collectionView)
        output.viewDidLoad()
    }

    // MARK: - Layout

    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        collectionView.frame = view.bounds
        collectionView.contentInset = view.safeAreaInsets
        collectionView.scrollIndicatorInsets = collectionView.contentInset
    }
}

// MARK: - {{ prefix }}{{ module_info.name }}ViewInput

extension {{ prefix }}{{ module_info.name }}ViewController: {{ prefix }}{{ module_info.name }}ViewInput, ForceViewUpdate {

    func update(with viewModel: {{ prefix }}{{ module_info.name }}ViewModel, force: Bool, animated: Bool) {
        let oldViewModel = self.viewModel
        self.viewModel = viewModel

        collectionViewManager.update(with: sectionItems, animated: animated)
    }
}
